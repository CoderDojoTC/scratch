{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CoderDojo Twin Cities Scratch Resources This GitHub repository is for sharing teaching resources to teach Scratch. This includes hints on getting both your students and mentors up to speed on Scracth. The site includes lesson plans and sample programs designed to be consitent with both the Python and Robots groups. If you hear of any good tools, please let us know. Target Audience Learning Scratch is ideal for students that don not yet have good keyboarding skills. Once students master using the shift keys and keyboard functions like copy and pasting text we suggest they move on to learing Python with turtle graphcs. List of Concepts Here are some of the concepts we will be learning in this course. If you are already familiar with these concepts you can skip over some of the labs. events - Capture an event such as clicking the run program button or a keyboard press. screen motion - Moving forward and turning with parameters such as distance and angle. square walk - Teach your sprite to walk in a square and draw figures. variables - Variables make our programs easier to read and easier to understand. loops - Loops help us when we have many tasks that we repeat over and over. conditionals - Conditionals allow us to change our behavior based on the rules we create. random numbers - Random number functions allow our programs to have the computer select new random numbers between a range of numbers. inputs Inputs allow us to prompt the user for values. Contributing to Our Library Do you have a specific example you would like to share with other students and teachers? Please see the Contributing menu for details on how to share your code.","title":"CoderDojo Twin Cities Scratch Resources"},{"location":"#coderdojo-twin-cities-scratch-resources","text":"This GitHub repository is for sharing teaching resources to teach Scratch. This includes hints on getting both your students and mentors up to speed on Scracth. The site includes lesson plans and sample programs designed to be consitent with both the Python and Robots groups. If you hear of any good tools, please let us know.","title":"CoderDojo Twin Cities Scratch Resources"},{"location":"#target-audience","text":"Learning Scratch is ideal for students that don not yet have good keyboarding skills. Once students master using the shift keys and keyboard functions like copy and pasting text we suggest they move on to learing Python with turtle graphcs.","title":"Target Audience"},{"location":"#list-of-concepts","text":"Here are some of the concepts we will be learning in this course. If you are already familiar with these concepts you can skip over some of the labs. events - Capture an event such as clicking the run program button or a keyboard press. screen motion - Moving forward and turning with parameters such as distance and angle. square walk - Teach your sprite to walk in a square and draw figures. variables - Variables make our programs easier to read and easier to understand. loops - Loops help us when we have many tasks that we repeat over and over. conditionals - Conditionals allow us to change our behavior based on the rules we create. random numbers - Random number functions allow our programs to have the computer select new random numbers between a range of numbers. inputs Inputs allow us to prompt the user for values.","title":"List of Concepts"},{"location":"#contributing-to-our-library","text":"Do you have a specific example you would like to share with other students and teachers? Please see the Contributing menu for details on how to share your code.","title":"Contributing to Our Library"},{"location":"contact/","text":"CoderDojo Twin Cities Contact Dan McCreary","title":"Contact"},{"location":"contact/#coderdojo-twin-cities-contact","text":"Dan McCreary","title":"CoderDojo Twin Cities Contact"},{"location":"labs/","text":"List of Turtle Graphics Labs These labs are ideal for students that have never done programming before. It will slowly introduce them to the concepts we used to write a program. The goal is to keep the number of blocks small but still teach the key concepts. These labs will be repeated in the Python curriculum once students gain keyboarding skills. Sprite Movement Commands Move a sprite in a square - we first need to understand the idea of an event that triggers the start of the program From Events Add the green \"When Flag Clicked\" Block From Motion Add the Move Foward Change Move Foward to be 100 From the Motion Add the Turn Right Change the turn right to be 90 Add more blocks to complete a square Drawing with the Pen Add the drawing extension and use the pendown - this lab is to get the students familiar with using the turtle to draw lines Add the pendown before the Move Foward Add the pen color block Change the pen color Change the pen size Adding Variables Add a Variable for the Distance Add a Variable for the Angle Adding a Loop Put the Forward and Right the for loop Change the Loop Count Draw a Hexagon Change the angle to be 60 Change the loop count to be 6 Change the Drawing Color for Even/Odd Steps in a Loop Conditionals Add a conditional block that will change the color","title":"Summary of Labs"},{"location":"labs/#list-of-turtle-graphics-labs","text":"These labs are ideal for students that have never done programming before. It will slowly introduce them to the concepts we used to write a program. The goal is to keep the number of blocks small but still teach the key concepts. These labs will be repeated in the Python curriculum once students gain keyboarding skills.","title":"List of Turtle Graphics Labs"},{"location":"labs/#sprite-movement-commands","text":"Move a sprite in a square - we first need to understand the idea of an event that triggers the start of the program From Events Add the green \"When Flag Clicked\" Block From Motion Add the Move Foward Change Move Foward to be 100 From the Motion Add the Turn Right Change the turn right to be 90 Add more blocks to complete a square","title":"Sprite Movement Commands"},{"location":"labs/#drawing-with-the-pen","text":"Add the drawing extension and use the pendown - this lab is to get the students familiar with using the turtle to draw lines Add the pendown before the Move Foward Add the pen color block Change the pen color Change the pen size","title":"Drawing with the Pen"},{"location":"labs/#adding-variables","text":"Add a Variable for the Distance Add a Variable for the Angle","title":"Adding Variables"},{"location":"labs/#adding-a-loop","text":"Put the Forward and Right the for loop Change the Loop Count","title":"Adding a Loop"},{"location":"labs/#draw-a-hexagon","text":"Change the angle to be 60 Change the loop count to be 6","title":"Draw a Hexagon"},{"location":"labs/#change-the-drawing-color-for-evenodd-steps-in-a-loop","text":"Conditionals Add a conditional block that will change the color","title":"Change the Drawing Color for Even/Odd Steps in a Loop"},{"location":"intro/01-getting-started/","text":"Getting Started with Scratch Scratch is ideal for students that want to learn the principals of programming before they have keyboarding skills. Once they have keyboarding skills we suggest they move on to learning turtle graphics with Python. Before you begin your mentoring session we recommend you do the following: Go to the scratch web site: http://scratch.mit.edu/ Create your own account for yourself and suggest that each student create their account with the help of their parent or guardian. Get familiar with the layout and functions of the site. Make sure you know how to go to the lower-left corner of the web page to add the \"Pen\" extension for drawing lines. Get familiar with each of the types of blocks.","title":"Getting Started"},{"location":"intro/01-getting-started/#getting-started-with-scratch","text":"Scratch is ideal for students that want to learn the principals of programming before they have keyboarding skills. Once they have keyboarding skills we suggest they move on to learning turtle graphics with Python. Before you begin your mentoring session we recommend you do the following: Go to the scratch web site: http://scratch.mit.edu/ Create your own account for yourself and suggest that each student create their account with the help of their parent or guardian. Get familiar with the layout and functions of the site. Make sure you know how to go to the lower-left corner of the web page to add the \"Pen\" extension for drawing lines. Get familiar with each of the types of blocks.","title":"Getting Started with Scratch"},{"location":"intro/02-list-of-blocks-used-in-intro/","text":"Getting Started with Scratch Scratch is ideal for students that want to learn the principals of programming before they have keyboarding skills. Once they have keyboarding skills we suggest they move on to learning turtle graphics with Python. Before you begin your mentoring session we recommend you do the following: Setup Account on Scratch Site Go to the scratch web site: http://scratch.mit.edu/ Create your own account for yourself and suggest that each student create their account with the help of their parent or guardian. Get familiar with the layout and functions of the site. Make sure you know how to go to the lower-left corner of the web page to add the \"Pen\" extension for drawing lines. Get familiar with each of the types of blocks. Adding the Pen Extension To be consistent with the other labs we are using the fast-feedback drawing with turtle graphics philosophy. Unfortunately, the MIT Scratch 3.0 user interface does not enable the Pen drawing blocks in the default user menu. This must be done before you can add the pendown block. To do this, go to the lower-left corner of the screen. There will be a blue box. If you hover over it, it will show that this is the \"Add Extension\" control. After you click on the Add Extension control you will see a grid of extensions. You want to then find the Pen Extension card and click on that. After you click this you must use the Back Icon at the top-left corner of the screen. When you are back to the main screen you should now see the Pen blocks on the lower left of the blocks menu.","title":"Intro Blocks"},{"location":"intro/02-list-of-blocks-used-in-intro/#getting-started-with-scratch","text":"Scratch is ideal for students that want to learn the principals of programming before they have keyboarding skills. Once they have keyboarding skills we suggest they move on to learning turtle graphics with Python. Before you begin your mentoring session we recommend you do the following:","title":"Getting Started with Scratch"},{"location":"intro/02-list-of-blocks-used-in-intro/#setup-account-on-scratch-site","text":"Go to the scratch web site: http://scratch.mit.edu/ Create your own account for yourself and suggest that each student create their account with the help of their parent or guardian. Get familiar with the layout and functions of the site. Make sure you know how to go to the lower-left corner of the web page to add the \"Pen\" extension for drawing lines. Get familiar with each of the types of blocks.","title":"Setup Account on Scratch Site"},{"location":"intro/02-list-of-blocks-used-in-intro/#adding-the-pen-extension","text":"To be consistent with the other labs we are using the fast-feedback drawing with turtle graphics philosophy. Unfortunately, the MIT Scratch 3.0 user interface does not enable the Pen drawing blocks in the default user menu. This must be done before you can add the pendown block. To do this, go to the lower-left corner of the screen. There will be a blue box. If you hover over it, it will show that this is the \"Add Extension\" control. After you click on the Add Extension control you will see a grid of extensions. You want to then find the Pen Extension card and click on that. After you click this you must use the Back Icon at the top-left corner of the screen. When you are back to the main screen you should now see the Pen blocks on the lower left of the blocks menu.","title":"Adding the Pen Extension"},{"location":"intro/03-first-square/","text":"Draw A Square (the hard way) For our first lab we will draw a square with \"Cody\" our CoderDojo turtle. Cody only needs to know three commands: Move Forward 100 Steps Turn Right 90 Degrees Wait for A Second Here is the final program we would like you to create: After this program runs, you will see the following picture on the right of the screen: To do this you will need to learn how to drag blocks from the left menu to the center panel. You will need to learn how to snap the blocks in place and unsnap them if you want to reorder them. When the blocks are ready to test you will need to click the green go flag: Link to Working Program Here is a link to a working program on the MIT Scratch web site: Cody the Turtle Draws a Square Experiments What if you want to draw a Hexagon? How would you need to change the program?","title":"Drawing A Square"},{"location":"intro/03-first-square/#draw-a-square-the-hard-way","text":"For our first lab we will draw a square with \"Cody\" our CoderDojo turtle. Cody only needs to know three commands: Move Forward 100 Steps Turn Right 90 Degrees Wait for A Second Here is the final program we would like you to create: After this program runs, you will see the following picture on the right of the screen: To do this you will need to learn how to drag blocks from the left menu to the center panel. You will need to learn how to snap the blocks in place and unsnap them if you want to reorder them. When the blocks are ready to test you will need to click the green go flag:","title":"Draw A Square (the hard way)"},{"location":"intro/03-first-square/#link-to-working-program","text":"Here is a link to a working program on the MIT Scratch web site: Cody the Turtle Draws a Square","title":"Link to Working Program"},{"location":"intro/03-first-square/#experiments","text":"What if you want to draw a Hexagon? How would you need to change the program?","title":"Experiments"},{"location":"intro/04-variables-square/","text":"Draw A Square With Variables You will note that the distance we move, the angle we turn and the time we wait are all repeated many times in the program. It is hard to maintain the code if we have to remember to change the program in many places. What if we could change a single place in the program and have the entire program change its behavior? This is one use of variables. Next, we will create a distance variable: Next, look for the \"Set Variable\" block and move it under the pendown block. Type in \"100\" to the value. Next, drag the distance variable into the Move Foward Block Link to Working Program Here is a link to a working program on the MIT Scratch web site: Cody the Turtle Draws a Square","title":"Draw A Square With Variables"},{"location":"intro/04-variables-square/#draw-a-square-with-variables","text":"You will note that the distance we move, the angle we turn and the time we wait are all repeated many times in the program. It is hard to maintain the code if we have to remember to change the program in many places. What if we could change a single place in the program and have the entire program change its behavior? This is one use of variables. Next, we will create a distance variable: Next, look for the \"Set Variable\" block and move it under the pendown block. Type in \"100\" to the value. Next, drag the distance variable into the Move Foward Block","title":"Draw A Square With Variables"},{"location":"intro/04-variables-square/#link-to-working-program","text":"Here is a link to a working program on the MIT Scratch web site: Cody the Turtle Draws a Square","title":"Link to Working Program"},{"location":"turtle/loop/","text":"Try goint to the Control (orange) menu and look for the repeat block. Drag it under the When Clicked block. Add the two following blocks inside the clicked block: Move 100 Steps Turn right 90 Degrees Try it","title":"Loop"},{"location":"turtle/loop/#_1","text":"Try goint to the Control (orange) menu and look for the repeat block. Drag it under the When Clicked block. Add the two following blocks inside the clicked block: Move 100 Steps Turn right 90 Degrees Try it","title":""}]}